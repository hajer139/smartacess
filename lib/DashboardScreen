import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';

class DashboardScreen extends StatefulWidget {
  @override
  _DashboardScreenState createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  File? _imageFile;
  final picker = ImagePicker();
  String? imageUrl;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _initializeFirebase();
  }

  Future<void> _initializeFirebase() async {
    await Firebase.initializeApp();
    setState(() {
      _isLoading = false;
    });
  }

  Future<void> _pickImage() async {
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      File image = File(pickedFile.path);
      setState(() {
        _imageFile = image;
      });
      await _uploadImageToFirebase(image);
    }
  }

  Future<void> _uploadImageToFirebase(File image) async {
    final fileName = 'profile_${DateTime.now().millisecondsSinceEpoch}.jpg';
    final storageRef = FirebaseStorage.instance.ref().child('profiles/$fileName');

    try {
      await storageRef.putFile(image);
      String downloadURL = await storageRef.getDownloadURL();
      print('✅ Image uploaded: $downloadURL');
      setState(() {
        imageUrl = downloadURL;
      });
    } catch (e) {
      print("❌ Erreur Firebase: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color(0xFF9575CD),
        title: Text("Tableau de Bord", style: GoogleFonts.poppins(color: Colors.white)),
        actions: [
          IconButton(
            icon: Icon(Icons.notifications_none),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text("Aucune notification")),
              );
            },
          )
        ],
      ),
      drawer: Drawer(
        child: ListView(
          children: [
            DrawerHeader(
              decoration: BoxDecoration(color: Color(0xFF9575CD)),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  GestureDetector(
                    onTap: _pickImage,
                    child: CircleAvatar(
                      key: ValueKey(imageUrl),
                      radius: 35,
                      backgroundImage: imageUrl != null ? NetworkImage(imageUrl!) : null,
                      child: imageUrl == null
                          ? Icon(Icons.person, size: 40, color: Colors.grey[700])
                          : null,
                      backgroundColor: Colors.white,
                    ),
                  ),
                  SizedBox(height: 10),
                  Text("Utilisateur", style: GoogleFonts.poppins(color: Colors.white))
                ],
              ),
            ),
            _buildDrawerItem(Icons.dashboard, "Accueil", () {}),
            _buildDrawerItem(Icons.settings, "Paramètres", () {}),
            _buildDrawerItem(Icons.logout, "Déconnexion", () {
              Navigator.pop(context);
              Navigator.pop(context);
            }, iconColor: Colors.red),
          ],
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                children: [
                  _buildDashboardCard("Utilisateurs", Icons.person, Colors.blueAccent),
                  _buildDashboardCard("Accès", Icons.lock_open, Colors.green),
                  _buildDashboardCard("Historique", Icons.history, Colors.orange),
                  _buildDashboardCard("Paramètres", Icons.settings, Colors.purple),
                ],
              ),
            ),
            if (imageUrl != null)
              Padding(
                padding: const EdgeInsets.only(top: 10),
                child: Text(
                  "Image URL: $imageUrl",
                  style: TextStyle(fontSize: 12, color: Colors.grey),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildDashboardCard(String title, IconData icon, Color color) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      elevation: 4,
      child: InkWell(
        borderRadius: BorderRadius.circular(20),
        onTap: () {},
        child: Padding(
          padding: const EdgeInsets.all(18.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 42, color: color),
              SizedBox(height: 10),
              Text(title, style: GoogleFonts.poppins(fontWeight: FontWeight.w500)),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDrawerItem(IconData icon, String title, VoidCallback onTap, {Color iconColor = Colors.deepPurple}) {
    return ListTile(
      leading: Icon(icon, color: iconColor),
      title: Text(title, style: GoogleFonts.poppins()),
      onTap: onTap,
    );
  }
}
